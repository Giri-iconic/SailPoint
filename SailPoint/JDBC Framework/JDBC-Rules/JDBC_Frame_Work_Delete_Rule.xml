<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC_Frame_Work_Delete_Rule" type="JDBCOperationProvisioning">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application whose data file is being processed.</Description>
      </Argument>
      <Argument name="schema">
        <Description>The Schema currently in use.</Description>
      </Argument>
      <Argument name="connection">
        <Description>A connection object to connect to database.</Description>
      </Argument>
      <Argument name="plan">
        <Description>The ProvisioningPlan created against the JDBC application.</Description>
      </Argument>
      <Argument name="request">
        <Description>The ProvisioningRequest created against the JDBC application.</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import sailpoint.object.Filter;
import sailpoint.object.QueryOptions;
import sailpoint.object.IdentityEntitlement;
import sailpoint.object.Entitlement;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Custom;

import org.apache.log4j.Logger;

Logger logger = Logger.getLogger("com.example.mycustomlogger");
logger.info("====================== Delete Rule =========================");

private ProvisioningResult nullCheckHandler(String errorMessage){
    logger.error(errorMessage);
    result.setStatus( ProvisioningResult.STATUS_FAILED );
    result.addError( errorMessage );
    return result;
}

logger.info(plan.toXml());

// Initialize result object
ProvisioningResult result = new ProvisioningResult();

// Check if the provisioning plan is null
if(plan == null) {
    return nullCheckHandler("Provisioning Plan is null");
}

// Retrieve Custom object for JDBC
Custom jdbcCustomObj = context.getObject( Custom.class, "JDBC Custom Object" );
Map entitlementDeleteQueriesMap = jdbcCustomObj.get("jdbc-frame-work-removeAllEntitlementsQuery");

// Get Account Delete Query
String accountDeleteQuery = jdbcCustomObj.get("jdbc-frame-work-deleteQuery");

// Null check for query
if(accountDeleteQuery == null){
    return nullCheckHandler("Account Delete query is null");
}

if(entitlementDeleteQueriesMap == null || entitlementDeleteQueriesMap.isEmpty()) {
    return nullCheckHandler("Entitlement Delete queries Map is null");
}

try {

    PreparedStatement statement;

    Filter identityFilter = Filter.eq("identity.name", plan.getNativeIdentity());
    Filter applicationFilter = Filter.eq("application", application);
    Filter collectiveFilter = Filter.and(identityFilter, applicationFilter);
    
    QueryOptions qo = new QueryOptions();
    qo.addFilter(collectiveFilter);

    List entitlementsList = context.getObjects(IdentityEntitlement.class, qo);
    Set processedAttr = new HashSet();
    
    // Delete all Entitlements
    for(IdentityEntitlement id : entitlementsList) {
        String attName = id.getName();
        if(!processedAttr.contains(attName)) {
            processedAttr.add(attName);
        
            String query = entitlementDeleteQueriesMap.get(attName);
            if(query == null || query.isEmpty()){
                logger.warn("Entitlement Delete "+ attName + " query is null");
                continue;
            }

            statement = connection.prepareStatement(query);
            statement.setString (1, (String) plan.getNativeIdentity());
            statement.executeUpdate();
            statement.close();

            // Log successful execution of the delete query
            logger.info("Executed Entitlement delete query for attribute: { " + attName + " }");
        }
    }

    // Delete User Account
    statement = connection.prepareStatement(accountDeleteQuery);
    statement.setString (1, (String) plan.getNativeIdentity());
    statement.executeUpdate();
    statement.close();

    application.setDisabled(true);
    // Log successful execution of the delete query
    logger.info("Executed Account delete query for user: { " + plan.getNativeIdentity() + " }");
    result.setStatus( ProvisioningResult.STATUS_COMMITTED );
}
catch( SQLException e ) {
    logger.error( e );
    result.setStatus( ProvisioningResult.STATUS_FAILED );
    result.addError( e );
}
logger.debug( "Result {" + result.toXml() + " }");
return result;</Source>
</Rule>