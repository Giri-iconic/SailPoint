<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC_Frame_Work_Update_Rule" type="JDBCOperationProvisioning">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult"/>
  <Source>import java.sql.PreparedStatement;
import java.sql.SQLException;

import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Custom;

import org.apache.log4j.Logger;


Logger logger = Logger.getLogger("com.example.mycustomlogger");
logger.info("====================== Update Rule =========================");

private ProvisioningResult nullCheckHandler(String errorMessage){
    logger.error(errorMessage);
    result.setStatus( ProvisioningResult.STATUS_FAILED );
    result.addError( errorMessage );
    return result;
}

// Initialize result object
ProvisioningResult result = new ProvisioningResult();
// Check if the provisioning plan is null
if(plan == null) {
    String error = "Provisioning Plan is null";
    return nullCheckHandler(error);
}


// Retrieve AttributeRequest request and custom JDBC object
List attributeRequests = request.getAttributeRequests();
Custom jdbcCustomObj = context.getObject( Custom.class, "JDBC Custom Object" );
Map entitlementAddQueriesMap = jdbcCustomObj.get("jdbc-frame-work-addEntitlementQuery");
Map entitlementRemoveQueriesMap = jdbcCustomObj.get("jdbc-frame-work-removeEntitlementQuery");

if(entitlementAddQueriesMap == null || entitlementAddQueriesMap.isEmpty()) {
    return nullCheckHandler("Entitlement Queries Map is null");
}

if(entitlementRemoveQueriesMap == null || entitlementRemoveQueriesMap.isEmpty()) {
    return nullCheckHandler("Entitlement Queries Map is null");
}

logger.debug(plan.toXml());

// Loop through attribute request and process entitlement operation
for (AttributeRequest attributeRequest : attributeRequests) {
    String attributeName = attributeRequest.getName();
    String attributeValue = attributeRequest.getValue();

    try{
        // Add entitlement
        if(ProvisioningPlan.Operation.Add.equals(attributeRequest.getOperation())){
            String entitlementAddQuery = entitlementAddQueriesMap.get(attributeName);

            PreparedStatement statement;

            if (entitlementAddQuery != null) {
                statement = connection.prepareStatement(entitlementAddQuery);
                statement.setString( 1, plan.getNativeIdentity() );
                statement.setString( 2, attributeValue );
                statement.executeUpdate();
                statement.close();

                // Log successful execution of each entitlement attribute query
                logger.info("Executed Entitlement add query for attribute: { " + attributeName + " }  with value: { " + attributeValue + " }");
            } else {
                logger.warn("No add query found for attribute: { " + attributeName + " }");
            }
        }

        // Remove entitlement
        if(ProvisioningPlan.Operation.Remove.equals(attributeRequest.getOperation())){
            String entitlementDeleteQuery = entitlementRemoveQueriesMap.get(attributeName);

            if (entitlementDeleteQuery != null) {
                statement = connection.prepareStatement( entitlementDeleteQuery );
                statement.setString( 1, plan.getNativeIdentity() );
                statement.setString( 2, attributeValue );
                statement.executeUpdate();

                // Log successful execution of each entitlement attribute query
                logger.info("Executed Entitlement remove query for attribute: { " + attributeName + " }  with value: { " + attributeValue + " }");
            } else {
                logger.warn("No remove query found for attribute: { " + attributeName + " }");
            }
        }

        // Update Account attribute
        if(ProvisioningPlan.Operation.Set.equals(attributeRequest.getOperation())){
            String attributeUpdateQuery = jdbcCustomObj.get("jdbc-frame-work-singleAttributeUpdateQuery");
            logger.info(attributeUpdateQuery);
            logger.info("Attribute Name : " + attributeName);
            logger.info("Attribute Value : " + attributeValue);
            System.out.println("=============================== : " + attributeName);
            if (attributeUpdateQuery != null) {
                attributeUpdateQuery = attributeUpdateQuery + attributeName +" = ? WHERE emp_id = ?";
                statement = connection.prepareStatement( attributeUpdateQuery );
                statement.setString( 1, attributeValue );
                statement.setString( 2, plan.getNativeIdentity() );
                statement.executeUpdate();

                // Log successful execution of each entitlement attribute query
                logger.info("Executed Attribute Update query for attribute: { " + attributeName + " }  with value: { " + attributeValue + " }");
            } else {
                return nullCheckHandler("Single Attribute Update Query is Null");
            }
        }

    }catch(SQLException e) {
        logger.error( e );
        result.setStatus(ProvisioningResult.STATUS_FAILED);
        result.addError(e);
        return result;
    }
}

result.setStatus( ProvisioningResult.STATUS_COMMITTED );
// Log the result and return
logger.info("Result: { " + result.toXml() + " }");
return result;</Source>
</Rule>