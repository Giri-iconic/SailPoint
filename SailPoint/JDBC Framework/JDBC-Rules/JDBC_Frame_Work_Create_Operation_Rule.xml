<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="JDBC_Frame_Work_Create_Operation_Rule" type="JDBCOperationProvisioning">
  <Description>This rule is used by the JDBC connector to do provisioning of the data .</Description>
  <Signature returnType="ProvisioningResult">
    <Inputs>
      <Argument name="log" type="org.apache.commons.logging.Log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context" type="sailpoint.api.SailPointContext">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application whose data file is being processed.</Description>
      </Argument>
      <Argument name="schema">
        <Description>The Schema currently in use.</Description>
      </Argument>
      <Argument name="connection">
        <Description>A connection object to connect to database.</Description>
      </Argument>
      <Argument name="plan">
        <Description>The ProvisioningPlan created against the JDBC application.</Description>
      </Argument>
      <Argument name="request">
        <Description>The ProvisioningRequest created against the JDBC application.</Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="result">
        <Description>A Provisioning Result object is desirable to return the status.IT can be a new object or part of  Provisioning Plan</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;

import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.Custom;
import sailpoint.object.ProvisioningResult;

import org.apache.log4j.Logger;

Logger logger = Logger.getLogger("com.example.mycustomlogger");
logger.info("====================== Create Rule =========================");

// Helper method to get attribute request value
public String getAttributeRequestValue(AccountRequest acctReq, String attribute) {
    if ( acctReq != null ) {
        AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);
        if ( attrReq != null ) {
            return attrReq.getValue();
        }
    }
    return null;
}

// Return ProvisioningResult and logs with error message
private ProvisioningResult nullCheckHandler(String errorMessage){
    logger.error(errorMessage);
    logger.error("From null check handler");
    result.setStatus( ProvisioningResult.STATUS_FAILED );
    result.addError( errorMessage );
    return result;
}

// Initialize result object
ProvisioningResult result = new ProvisioningResult();
// Check if the provisioning plan is null
if(plan == null) {
    String error = "Provisioning Plan is null";
    return nullCheckHandler(error);
}

// Retrieve account request and custom JDBC object
AccountRequest acctRequest = (AccountRequest) request;
Custom jdbcCustomObj = context.getObject( Custom.class, "JDBC Custom Object" );
Map entitlementQueriesMap = jdbcCustomObj.get("jdbc-frame-work-addEntitlementQuery");

String insertQuery = jdbcCustomObj.get("jdbc-frame-work-insertQuery");

if( insertQuery == null || insertQuery.isEmpty()) {
    return nullCheckHandler( "Insert Query is null" );
}

if(entitlementQueriesMap == null || entitlementQueriesMap.isEmpty()) {
    return nullCheckHandler("Entitlement Add Queries Map is null");
}

// Retrieve attribute values
String first_name = getAttributeRequestValue(acctRequest, "first_name");
String last_name = getAttributeRequestValue(acctRequest, "last_name");
String full_name = getAttributeRequestValue(acctRequest, "full_name");
String department = getAttributeRequestValue(acctRequest, "department");
String location = getAttributeRequestValue(acctRequest, "location");

// Check for null values in essential attributes
StringBuilder sb = new StringBuilder();
boolean hasNull = false;
sb.append("Error: Provisioning Plan has following null value(s) :- ");

if(first_name == null) {
    sb.append(" 'Full Name'");
    hasNull= true;
}
if(last_name == null) {
    sb.append(" 'Last Name'");
    hasNull= true;
}
if(full_name == null) {
    sb.append(" 'Full Name'");
    hasNull= true;
}
if(department == null) {
    sb.append(" 'Department'");
    hasNull= true;
}
if (location == null) {
    sb.append(" 'Location'");
    hasNull= true;
}

if(hasNull){
    String error = sb.toString();
    return nullCheckHandler(error);
}

try {

    // Prepare and execute the insert query
    
    PreparedStatement statement = connection.prepareStatement(insertQuery);
    statement.setString (1, plan.getNativeIdentity());
    statement.setString (2, first_name);
    statement.setString (3, last_name);
    statement.setString (4, full_name);
    statement.setString (5, department);
    statement.setString (6, location);
    statement.executeUpdate();

    // Log successful execution of the insert query
    logger.info("Executed insert query for user: { " + plan.getNativeIdentity() + " }");

    for (AttributeRequest attributeRequest : request.getAttributeRequests()) {
        if(ProvisioningPlan.Operation.Add.equals(attributeRequest.getOperation())){

            String attributeName = attributeRequest.getName();
            String attributeValue = attributeRequest.getValue();
            String entitlementAddQuery = entitlementQueriesMap.get(attributeName);

            if(entitlementAddQuery != null){
                statement = connection.prepareStatement(entitlementAddQuery);
                statement.setString(1,plan.getNativeIdentity());
                statement.setString(2,attributeValue);
                statement.executeUpdate();

            // Log successful execution of each entitlement attribute query
            logger.info("Executed entitlement add query for attribute: { " + attributeName + " }  with value: { " + attributeValue + " }");
            } else {
                logger.warn(attributeName + " Entitlement Add query is null");
            }
        }
    }

    result.setStatus( ProvisioningResult.STATUS_COMMITTED );
}
catch( SQLException e ) {
    logger.error( e );
    result.setStatus( ProvisioningResult.STATUS_FAILED );
    result.addError( e );
}
// Log the result and return
logger.info("Result: { " + result.toXml() + " }");
return result;</Source>
</Rule>